CREATE OR REPLACE PROCEDURE CheckEvenOdd(num IN NUMBER) IS
BEGIN
    IF MOD(num, 2) = 0 THEN
        DBMS_OUTPUT.PUT_LINE(num || ' is even');
    ELSE
        DBMS_OUTPUT.PUT_LINE(num || ' is odd');
    END IF;
END;
/

CREATE TABLE ExampleTable (
    ID NUMBER PRIMARY KEY,
    Name VARCHAR2(50) NOT NULL,
    Age NUMBER CHECK (Age >= 18),
    Address VARCHAR2(100),
    Email VARCHAR2(100) UNIQUE,
    Phone VARCHAR2(20) NOT NULL
);

-- Create Employees table
CREATE TABLE Employees (
    EmployeeID INT PRIMARY KEY,
    EmpName VARCHAR(50),
    SkillID INT,
    Salary DECIMAL(10, 2),
    FOREIGN KEY (SkillID) REFERENCES Skills(SkillID)
);

-- Create Skills table
CREATE TABLE Skills (
    SkillID INT PRIMARY KEY,
    SkillName VARCHAR(50),
    Description VARCHAR(255)
);

-- Insert data into Employees
INSERT INTO Employees VALUES (1, 'John', 1, 50000.00);
INSERT INTO Employees VALUES (2, 'Alice', 2, 60000.00);
INSERT INTO Employees VALUES (3, 'Bob', 3, 55000.00);
INSERT INTO Employees VALUES (4, 'Sarah', NULL, 52000.00);
INSERT INTO Employees VALUES (5, 'Mike', NULL, 58000.00);

-- Insert data into Skills
INSERT INTO Skills VALUES (1, 'Programming', 'Expert in programming languages');
INSERT INTO Skills VALUES (2, 'Design', 'Creative design skills');
INSERT INTO Skills VALUES (3, 'Management', 'Leadership and management abilities');
INSERT INTO Skills VALUES (4, 'Marketing', 'Skills related to marketing');
INSERT INTO Skills VALUES (5, 'Communication', 'Effective communication skills');

SELECT * FROM Employees WHERE SkillID IS NULL;

SELECT * FROM Employees WHERE Salary = (SELECT MAX(Salary) FROM Employees);

SELECT AVG(Salary) AS AverageSalary FROM Employees;

UPDATE Employees SET Salary = 62000.00 WHERE EmployeeID = 3;

SELECT s.SkillName, COUNT(*) AS NumEmployees 
FROM Employees e 
JOIN Skills s ON e.SkillID = s.SkillID 
WHERE e.SkillID IS NOT NULL 
GROUP BY s.SkillName 
HAVING COUNT(*) >= 2;
